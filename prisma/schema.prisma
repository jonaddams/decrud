// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String    @id @default(cuid())
  email                    String    @unique
  name                     String?
  image                    String?
  emailVerified            DateTime? @map("email_verified")
  role                     UserRole  @default(USER)
  currentImpersonationMode ImpersonationMode @default(SELF) @map("current_impersonation_mode")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  accounts  Account[]
  sessions  Session[]
  documents Document[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application models
model Document {
  id                String   @id @default(cuid())
  documentEngineId  String   @unique @map("document_engine_id")
  title             String
  filename          String
  fileType          String   @map("file_type")
  fileSize          BigInt?  @map("file_size")
  author            String?
  ownerId           String   @map("owner_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum UserRole {
  ADMIN
  USER
}

enum ImpersonationMode {
  SELF
  ADMIN
  USER
}
